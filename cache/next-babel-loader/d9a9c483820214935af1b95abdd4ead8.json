{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport matter from \"gray-matter\";\nimport fs from \"fs\";\nimport path from \"path\";\nexport function getPagesFolder() {\n  const pagesPath = fs.readdirSync(`${process.cwd()}/pages/.`);\n  const markdownFiles = []; // Add only `pages./.md` files to array\n\n  pagesPath.forEach(file => {\n    if (path.extname(file) == \".md\") markdownFiles.push(file);\n  });\n  return markdownFiles;\n}\nexport function getPagesSlugs() {\n  const pagesFolder = getPagesFolder(); // Map Markdown files as slugs\n\n  const paths = pagesFolder.map(filename => ({\n    params: {\n      slug: filename.replace(\".md\", \"\")\n    }\n  }));\n  return paths; // console.log(paths);\n}\nexport function getPagesProps() {\n  const pagesFolder = getPagesFolder();\n  const pages = pagesFolder.map(filename => {\n    // Get Markdown content as raw string\n    const markdownWithMetadata = fs.readFileSync(`pages/${filename}`).toString(); // Parse Markdown\n\n    const {\n      data,\n      excerpt,\n      content\n    } = matter(markdownWithMetadata);\n\n    const frontmatter = _objectSpread({}, data); // Remove .md for page name\n\n\n    const slug = filename.replace(\".md\", \"\");\n    return {\n      slug,\n      frontmatter,\n      excerpt,\n      content\n    };\n  });\n  return pages;\n}\nexport function getPageBySlug(slug) {\n  const pages = getPagesProps();\n  const pageIndex = pages.findIndex(({\n    slug: pageSlug\n  }) => pageSlug === slug);\n  const {\n    frontmatter,\n    content,\n    excerpt\n  } = pages[pageIndex];\n  return {\n    frontmatter,\n    page: {\n      content,\n      excerpt\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}